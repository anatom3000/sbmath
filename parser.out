Grammar:

Rule 0     S' -> expr
Rule 1     expr -> LPAREN expr RPAREN
Rule 2     expr -> number expr  [precedence=left, level=2]
Rule 3     expr -> wildcard
Rule 4     expr -> ident
Rule 5     expr -> number
Rule 6     expr -> PLUS expr  [precedence=right, level=4]
Rule 7     expr -> MINUS expr  [precedence=right, level=4]
Rule 8     expr -> expr POW expr  [precedence=right, level=5]
Rule 9     expr -> expr DIVIDE expr  [precedence=right, level=3]
Rule 10    expr -> expr TIMES expr  [precedence=right, level=3]
Rule 11    expr -> expr MINUS expr  [precedence=left, level=1]
Rule 12    expr -> expr PLUS expr  [precedence=left, level=1]
Rule 13    number -> NUMBER
Rule 14    ident -> IDENT
Rule 15    wildcard -> LBRACK RBRACK

Terminals, with rules where they appear:

DIVIDE               : 9
IDENT                : 14
LBRACK               : 15
LPAREN               : 1
MINUS                : 7 11
NUMBER               : 13
PLUS                 : 6 12
POW                  : 8
RBRACK               : 15
RPAREN               : 1
TIMES                : 10
error                : 

Nonterminals, with rules where they appear:

expr                 : 1 2 6 7 8 8 9 9 10 10 11 11 12 12 0
ident                : 4
number               : 2 5
wildcard             : 3


state 0

    (0) S' -> . expr
    (1) expr -> . LPAREN expr RPAREN
    (2) expr -> . number expr
    (3) expr -> . wildcard
    (4) expr -> . ident
    (5) expr -> . number
    (6) expr -> . PLUS expr
    (7) expr -> . MINUS expr
    (8) expr -> . expr POW expr
    (9) expr -> . expr DIVIDE expr
    (10) expr -> . expr TIMES expr
    (11) expr -> . expr MINUS expr
    (12) expr -> . expr PLUS expr
    (13) number -> . NUMBER
    (15) wildcard -> . LBRACK RBRACK
    (14) ident -> . IDENT
    LPAREN          shift and go to state 2
    PLUS            shift and go to state 6
    MINUS           shift and go to state 7
    NUMBER          shift and go to state 8
    LBRACK          shift and go to state 9
    IDENT           shift and go to state 10

    expr                           shift and go to state 1
    number                         shift and go to state 3
    wildcard                       shift and go to state 4
    ident                          shift and go to state 5

state 1

    (0) S' -> expr .
    (8) expr -> expr . POW expr
    (9) expr -> expr . DIVIDE expr
    (10) expr -> expr . TIMES expr
    (11) expr -> expr . MINUS expr
    (12) expr -> expr . PLUS expr
    POW             shift and go to state 11
    DIVIDE          shift and go to state 12
    TIMES           shift and go to state 13
    MINUS           shift and go to state 14
    PLUS            shift and go to state 15


state 2

    (1) expr -> LPAREN . expr RPAREN
    (1) expr -> . LPAREN expr RPAREN
    (2) expr -> . number expr
    (3) expr -> . wildcard
    (4) expr -> . ident
    (5) expr -> . number
    (6) expr -> . PLUS expr
    (7) expr -> . MINUS expr
    (8) expr -> . expr POW expr
    (9) expr -> . expr DIVIDE expr
    (10) expr -> . expr TIMES expr
    (11) expr -> . expr MINUS expr
    (12) expr -> . expr PLUS expr
    (13) number -> . NUMBER
    (15) wildcard -> . LBRACK RBRACK
    (14) ident -> . IDENT
    LPAREN          shift and go to state 2
    PLUS            shift and go to state 6
    MINUS           shift and go to state 7
    NUMBER          shift and go to state 8
    LBRACK          shift and go to state 9
    IDENT           shift and go to state 10

    expr                           shift and go to state 16
    number                         shift and go to state 3
    wildcard                       shift and go to state 4
    ident                          shift and go to state 5

state 3

    (2) expr -> number . expr
    (5) expr -> number .
    (1) expr -> . LPAREN expr RPAREN
    (2) expr -> . number expr
    (3) expr -> . wildcard
    (4) expr -> . ident
    (5) expr -> . number
    (6) expr -> . PLUS expr
    (7) expr -> . MINUS expr
    (8) expr -> . expr POW expr
    (9) expr -> . expr DIVIDE expr
    (10) expr -> . expr TIMES expr
    (11) expr -> . expr MINUS expr
    (12) expr -> . expr PLUS expr
    (13) number -> . NUMBER
    (15) wildcard -> . LBRACK RBRACK
    (14) ident -> . IDENT
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
    POW             reduce using rule 5 (expr -> number .)
    DIVIDE          reduce using rule 5 (expr -> number .)
    TIMES           reduce using rule 5 (expr -> number .)
    $end            reduce using rule 5 (expr -> number .)
    RPAREN          reduce using rule 5 (expr -> number .)
    LPAREN          shift and go to state 2
    PLUS            shift and go to state 6
    MINUS           shift and go to state 7
    NUMBER          shift and go to state 8
    LBRACK          shift and go to state 9
    IDENT           shift and go to state 10

    number                         shift and go to state 3
    expr                           shift and go to state 17
    wildcard                       shift and go to state 4
    ident                          shift and go to state 5

state 4

    (3) expr -> wildcard .
    POW             reduce using rule 3 (expr -> wildcard .)
    DIVIDE          reduce using rule 3 (expr -> wildcard .)
    TIMES           reduce using rule 3 (expr -> wildcard .)
    MINUS           reduce using rule 3 (expr -> wildcard .)
    PLUS            reduce using rule 3 (expr -> wildcard .)
    $end            reduce using rule 3 (expr -> wildcard .)
    RPAREN          reduce using rule 3 (expr -> wildcard .)


state 5

    (4) expr -> ident .
    POW             reduce using rule 4 (expr -> ident .)
    DIVIDE          reduce using rule 4 (expr -> ident .)
    TIMES           reduce using rule 4 (expr -> ident .)
    MINUS           reduce using rule 4 (expr -> ident .)
    PLUS            reduce using rule 4 (expr -> ident .)
    $end            reduce using rule 4 (expr -> ident .)
    RPAREN          reduce using rule 4 (expr -> ident .)


state 6

    (6) expr -> PLUS . expr
    (1) expr -> . LPAREN expr RPAREN
    (2) expr -> . number expr
    (3) expr -> . wildcard
    (4) expr -> . ident
    (5) expr -> . number
    (6) expr -> . PLUS expr
    (7) expr -> . MINUS expr
    (8) expr -> . expr POW expr
    (9) expr -> . expr DIVIDE expr
    (10) expr -> . expr TIMES expr
    (11) expr -> . expr MINUS expr
    (12) expr -> . expr PLUS expr
    (13) number -> . NUMBER
    (15) wildcard -> . LBRACK RBRACK
    (14) ident -> . IDENT
    LPAREN          shift and go to state 2
    PLUS            shift and go to state 6
    MINUS           shift and go to state 7
    NUMBER          shift and go to state 8
    LBRACK          shift and go to state 9
    IDENT           shift and go to state 10

    expr                           shift and go to state 18
    number                         shift and go to state 3
    wildcard                       shift and go to state 4
    ident                          shift and go to state 5

state 7

    (7) expr -> MINUS . expr
    (1) expr -> . LPAREN expr RPAREN
    (2) expr -> . number expr
    (3) expr -> . wildcard
    (4) expr -> . ident
    (5) expr -> . number
    (6) expr -> . PLUS expr
    (7) expr -> . MINUS expr
    (8) expr -> . expr POW expr
    (9) expr -> . expr DIVIDE expr
    (10) expr -> . expr TIMES expr
    (11) expr -> . expr MINUS expr
    (12) expr -> . expr PLUS expr
    (13) number -> . NUMBER
    (15) wildcard -> . LBRACK RBRACK
    (14) ident -> . IDENT
    LPAREN          shift and go to state 2
    PLUS            shift and go to state 6
    MINUS           shift and go to state 7
    NUMBER          shift and go to state 8
    LBRACK          shift and go to state 9
    IDENT           shift and go to state 10

    expr                           shift and go to state 19
    number                         shift and go to state 3
    wildcard                       shift and go to state 4
    ident                          shift and go to state 5

state 8

    (13) number -> NUMBER .
    LPAREN          reduce using rule 13 (number -> NUMBER .)
    PLUS            reduce using rule 13 (number -> NUMBER .)
    MINUS           reduce using rule 13 (number -> NUMBER .)
    NUMBER          reduce using rule 13 (number -> NUMBER .)
    LBRACK          reduce using rule 13 (number -> NUMBER .)
    IDENT           reduce using rule 13 (number -> NUMBER .)
    POW             reduce using rule 13 (number -> NUMBER .)
    DIVIDE          reduce using rule 13 (number -> NUMBER .)
    TIMES           reduce using rule 13 (number -> NUMBER .)
    $end            reduce using rule 13 (number -> NUMBER .)
    RPAREN          reduce using rule 13 (number -> NUMBER .)


state 9

    (15) wildcard -> LBRACK . RBRACK
    RBRACK          shift and go to state 20


state 10

    (14) ident -> IDENT .
    POW             reduce using rule 14 (ident -> IDENT .)
    DIVIDE          reduce using rule 14 (ident -> IDENT .)
    TIMES           reduce using rule 14 (ident -> IDENT .)
    MINUS           reduce using rule 14 (ident -> IDENT .)
    PLUS            reduce using rule 14 (ident -> IDENT .)
    $end            reduce using rule 14 (ident -> IDENT .)
    RPAREN          reduce using rule 14 (ident -> IDENT .)


state 11

    (8) expr -> expr POW . expr
    (1) expr -> . LPAREN expr RPAREN
    (2) expr -> . number expr
    (3) expr -> . wildcard
    (4) expr -> . ident
    (5) expr -> . number
    (6) expr -> . PLUS expr
    (7) expr -> . MINUS expr
    (8) expr -> . expr POW expr
    (9) expr -> . expr DIVIDE expr
    (10) expr -> . expr TIMES expr
    (11) expr -> . expr MINUS expr
    (12) expr -> . expr PLUS expr
    (13) number -> . NUMBER
    (15) wildcard -> . LBRACK RBRACK
    (14) ident -> . IDENT
    LPAREN          shift and go to state 2
    PLUS            shift and go to state 6
    MINUS           shift and go to state 7
    NUMBER          shift and go to state 8
    LBRACK          shift and go to state 9
    IDENT           shift and go to state 10

    expr                           shift and go to state 21
    number                         shift and go to state 3
    wildcard                       shift and go to state 4
    ident                          shift and go to state 5

state 12

    (9) expr -> expr DIVIDE . expr
    (1) expr -> . LPAREN expr RPAREN
    (2) expr -> . number expr
    (3) expr -> . wildcard
    (4) expr -> . ident
    (5) expr -> . number
    (6) expr -> . PLUS expr
    (7) expr -> . MINUS expr
    (8) expr -> . expr POW expr
    (9) expr -> . expr DIVIDE expr
    (10) expr -> . expr TIMES expr
    (11) expr -> . expr MINUS expr
    (12) expr -> . expr PLUS expr
    (13) number -> . NUMBER
    (15) wildcard -> . LBRACK RBRACK
    (14) ident -> . IDENT
    LPAREN          shift and go to state 2
    PLUS            shift and go to state 6
    MINUS           shift and go to state 7
    NUMBER          shift and go to state 8
    LBRACK          shift and go to state 9
    IDENT           shift and go to state 10

    expr                           shift and go to state 22
    number                         shift and go to state 3
    wildcard                       shift and go to state 4
    ident                          shift and go to state 5

state 13

    (10) expr -> expr TIMES . expr
    (1) expr -> . LPAREN expr RPAREN
    (2) expr -> . number expr
    (3) expr -> . wildcard
    (4) expr -> . ident
    (5) expr -> . number
    (6) expr -> . PLUS expr
    (7) expr -> . MINUS expr
    (8) expr -> . expr POW expr
    (9) expr -> . expr DIVIDE expr
    (10) expr -> . expr TIMES expr
    (11) expr -> . expr MINUS expr
    (12) expr -> . expr PLUS expr
    (13) number -> . NUMBER
    (15) wildcard -> . LBRACK RBRACK
    (14) ident -> . IDENT
    LPAREN          shift and go to state 2
    PLUS            shift and go to state 6
    MINUS           shift and go to state 7
    NUMBER          shift and go to state 8
    LBRACK          shift and go to state 9
    IDENT           shift and go to state 10

    expr                           shift and go to state 23
    number                         shift and go to state 3
    wildcard                       shift and go to state 4
    ident                          shift and go to state 5

state 14

    (11) expr -> expr MINUS . expr
    (1) expr -> . LPAREN expr RPAREN
    (2) expr -> . number expr
    (3) expr -> . wildcard
    (4) expr -> . ident
    (5) expr -> . number
    (6) expr -> . PLUS expr
    (7) expr -> . MINUS expr
    (8) expr -> . expr POW expr
    (9) expr -> . expr DIVIDE expr
    (10) expr -> . expr TIMES expr
    (11) expr -> . expr MINUS expr
    (12) expr -> . expr PLUS expr
    (13) number -> . NUMBER
    (15) wildcard -> . LBRACK RBRACK
    (14) ident -> . IDENT
    LPAREN          shift and go to state 2
    PLUS            shift and go to state 6
    MINUS           shift and go to state 7
    NUMBER          shift and go to state 8
    LBRACK          shift and go to state 9
    IDENT           shift and go to state 10

    expr                           shift and go to state 24
    number                         shift and go to state 3
    wildcard                       shift and go to state 4
    ident                          shift and go to state 5

state 15

    (12) expr -> expr PLUS . expr
    (1) expr -> . LPAREN expr RPAREN
    (2) expr -> . number expr
    (3) expr -> . wildcard
    (4) expr -> . ident
    (5) expr -> . number
    (6) expr -> . PLUS expr
    (7) expr -> . MINUS expr
    (8) expr -> . expr POW expr
    (9) expr -> . expr DIVIDE expr
    (10) expr -> . expr TIMES expr
    (11) expr -> . expr MINUS expr
    (12) expr -> . expr PLUS expr
    (13) number -> . NUMBER
    (15) wildcard -> . LBRACK RBRACK
    (14) ident -> . IDENT
    LPAREN          shift and go to state 2
    PLUS            shift and go to state 6
    MINUS           shift and go to state 7
    NUMBER          shift and go to state 8
    LBRACK          shift and go to state 9
    IDENT           shift and go to state 10

    expr                           shift and go to state 25
    number                         shift and go to state 3
    wildcard                       shift and go to state 4
    ident                          shift and go to state 5

state 16

    (1) expr -> LPAREN expr . RPAREN
    (8) expr -> expr . POW expr
    (9) expr -> expr . DIVIDE expr
    (10) expr -> expr . TIMES expr
    (11) expr -> expr . MINUS expr
    (12) expr -> expr . PLUS expr
    RPAREN          shift and go to state 26
    POW             shift and go to state 11
    DIVIDE          shift and go to state 12
    TIMES           shift and go to state 13
    MINUS           shift and go to state 14
    PLUS            shift and go to state 15


state 17

    (2) expr -> number expr .
    (8) expr -> expr . POW expr
    (9) expr -> expr . DIVIDE expr
    (10) expr -> expr . TIMES expr
    (11) expr -> expr . MINUS expr
    (12) expr -> expr . PLUS expr
    MINUS           reduce using rule 2 (expr -> number expr .)
    PLUS            reduce using rule 2 (expr -> number expr .)
    $end            reduce using rule 2 (expr -> number expr .)
    RPAREN          reduce using rule 2 (expr -> number expr .)
    POW             shift and go to state 11
    DIVIDE          shift and go to state 12
    TIMES           shift and go to state 13


state 18

    (6) expr -> PLUS expr .
    (8) expr -> expr . POW expr
    (9) expr -> expr . DIVIDE expr
    (10) expr -> expr . TIMES expr
    (11) expr -> expr . MINUS expr
    (12) expr -> expr . PLUS expr
    DIVIDE          reduce using rule 6 (expr -> PLUS expr .)
    TIMES           reduce using rule 6 (expr -> PLUS expr .)
    MINUS           reduce using rule 6 (expr -> PLUS expr .)
    PLUS            reduce using rule 6 (expr -> PLUS expr .)
    $end            reduce using rule 6 (expr -> PLUS expr .)
    RPAREN          reduce using rule 6 (expr -> PLUS expr .)
    POW             shift and go to state 11


state 19

    (7) expr -> MINUS expr .
    (8) expr -> expr . POW expr
    (9) expr -> expr . DIVIDE expr
    (10) expr -> expr . TIMES expr
    (11) expr -> expr . MINUS expr
    (12) expr -> expr . PLUS expr
    DIVIDE          reduce using rule 7 (expr -> MINUS expr .)
    TIMES           reduce using rule 7 (expr -> MINUS expr .)
    MINUS           reduce using rule 7 (expr -> MINUS expr .)
    PLUS            reduce using rule 7 (expr -> MINUS expr .)
    $end            reduce using rule 7 (expr -> MINUS expr .)
    RPAREN          reduce using rule 7 (expr -> MINUS expr .)
    POW             shift and go to state 11


state 20

    (15) wildcard -> LBRACK RBRACK .
    POW             reduce using rule 15 (wildcard -> LBRACK RBRACK .)
    DIVIDE          reduce using rule 15 (wildcard -> LBRACK RBRACK .)
    TIMES           reduce using rule 15 (wildcard -> LBRACK RBRACK .)
    MINUS           reduce using rule 15 (wildcard -> LBRACK RBRACK .)
    PLUS            reduce using rule 15 (wildcard -> LBRACK RBRACK .)
    $end            reduce using rule 15 (wildcard -> LBRACK RBRACK .)
    RPAREN          reduce using rule 15 (wildcard -> LBRACK RBRACK .)


state 21

    (8) expr -> expr POW expr .
    (8) expr -> expr . POW expr
    (9) expr -> expr . DIVIDE expr
    (10) expr -> expr . TIMES expr
    (11) expr -> expr . MINUS expr
    (12) expr -> expr . PLUS expr
    DIVIDE          reduce using rule 8 (expr -> expr POW expr .)
    TIMES           reduce using rule 8 (expr -> expr POW expr .)
    MINUS           reduce using rule 8 (expr -> expr POW expr .)
    PLUS            reduce using rule 8 (expr -> expr POW expr .)
    $end            reduce using rule 8 (expr -> expr POW expr .)
    RPAREN          reduce using rule 8 (expr -> expr POW expr .)
    POW             shift and go to state 11


state 22

    (9) expr -> expr DIVIDE expr .
    (8) expr -> expr . POW expr
    (9) expr -> expr . DIVIDE expr
    (10) expr -> expr . TIMES expr
    (11) expr -> expr . MINUS expr
    (12) expr -> expr . PLUS expr
    MINUS           reduce using rule 9 (expr -> expr DIVIDE expr .)
    PLUS            reduce using rule 9 (expr -> expr DIVIDE expr .)
    $end            reduce using rule 9 (expr -> expr DIVIDE expr .)
    RPAREN          reduce using rule 9 (expr -> expr DIVIDE expr .)
    POW             shift and go to state 11
    DIVIDE          shift and go to state 12
    TIMES           shift and go to state 13


state 23

    (10) expr -> expr TIMES expr .
    (8) expr -> expr . POW expr
    (9) expr -> expr . DIVIDE expr
    (10) expr -> expr . TIMES expr
    (11) expr -> expr . MINUS expr
    (12) expr -> expr . PLUS expr
    MINUS           reduce using rule 10 (expr -> expr TIMES expr .)
    PLUS            reduce using rule 10 (expr -> expr TIMES expr .)
    $end            reduce using rule 10 (expr -> expr TIMES expr .)
    RPAREN          reduce using rule 10 (expr -> expr TIMES expr .)
    POW             shift and go to state 11
    DIVIDE          shift and go to state 12
    TIMES           shift and go to state 13


state 24

    (11) expr -> expr MINUS expr .
    (8) expr -> expr . POW expr
    (9) expr -> expr . DIVIDE expr
    (10) expr -> expr . TIMES expr
    (11) expr -> expr . MINUS expr
    (12) expr -> expr . PLUS expr
    MINUS           reduce using rule 11 (expr -> expr MINUS expr .)
    PLUS            reduce using rule 11 (expr -> expr MINUS expr .)
    $end            reduce using rule 11 (expr -> expr MINUS expr .)
    RPAREN          reduce using rule 11 (expr -> expr MINUS expr .)
    POW             shift and go to state 11
    DIVIDE          shift and go to state 12
    TIMES           shift and go to state 13


state 25

    (12) expr -> expr PLUS expr .
    (8) expr -> expr . POW expr
    (9) expr -> expr . DIVIDE expr
    (10) expr -> expr . TIMES expr
    (11) expr -> expr . MINUS expr
    (12) expr -> expr . PLUS expr
    MINUS           reduce using rule 12 (expr -> expr PLUS expr .)
    PLUS            reduce using rule 12 (expr -> expr PLUS expr .)
    $end            reduce using rule 12 (expr -> expr PLUS expr .)
    RPAREN          reduce using rule 12 (expr -> expr PLUS expr .)
    POW             shift and go to state 11
    DIVIDE          shift and go to state 12
    TIMES           shift and go to state 13


state 26

    (1) expr -> LPAREN expr RPAREN .
    POW             reduce using rule 1 (expr -> LPAREN expr RPAREN .)
    DIVIDE          reduce using rule 1 (expr -> LPAREN expr RPAREN .)
    TIMES           reduce using rule 1 (expr -> LPAREN expr RPAREN .)
    MINUS           reduce using rule 1 (expr -> LPAREN expr RPAREN .)
    PLUS            reduce using rule 1 (expr -> LPAREN expr RPAREN .)
    $end            reduce using rule 1 (expr -> LPAREN expr RPAREN .)
    RPAREN          reduce using rule 1 (expr -> LPAREN expr RPAREN .)


Conflicts:

shift/reduce conflict for PLUS in state 3 resolved as shift
shift/reduce conflict for MINUS in state 3 resolved as shift